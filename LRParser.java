import java.io.IOException;
import java.util.*;

public class LRParser {
	public LRParser() {
	}

    public void parse(LRTable lrTable, List<TokenTerminal> tokens, List<Production> productions) {
        Stack<Integer> stateStack = new Stack<>();
        stateStack.push(0);
        Stack<TokenTerminal> symbolStack = new Stack<>();
        int tokenIndex = 0;

        while (true) {
            int currentState = stateStack.peek();

            if (tokenIndex >= tokens.size()) {
                throw new RuntimeException("Unexpected end of input");
            }

            TokenTerminal currentToken = tokens.get(tokenIndex);
            Action action = lrTable.getAction(currentState, currentToken.getTerminal());

            if (action == null) {
                throw new RuntimeException("Syntax error at token: " + currentToken.getToken() + " in state: " + currentState);
            }

            System.out.println("State Stack: " + stateStack);
            System.out.println("Symbol Stack: " + symbolStack);
            System.out.println("Current State: S " + currentState);
            System.out.println("Current Token: " + currentToken.getTerminal());
            System.out.println("Action: " + action.actionType + " " + (action.state != -1 ? "S" + action.state : action.production));

            switch (action.actionType) {
                case "SHIFT":
                    System.out.println("[S] S" + currentState + " " + currentToken.getTerminal());
                    stateStack.push(action.state);
                    symbolStack.push(currentToken);
                    tokenIndex++;
                    break;
                case "REDUCE":
                    applyReduceAction(action, productions, stateStack, symbolStack, lrTable);
                    break;
                case "ACCEPT":
                    System.out.println("Accepted");
                    return;
            }
        }
    }

    private void applyReduceAction(Action action, List<Production> productions, Stack<Integer> stateStack, Stack<TokenTerminal> symbolStack, LRTable lrTable) {
        Production production = productions.get(Integer.parseInt(action.production));
        int rhsLength = (int) production.rightHand.stream().filter(symbol -> !symbol.getName().equals("eps")).count();

        for (int i = 0; i < rhsLength; i++) {
            stateStack.pop();
            symbolStack.pop();
        }

        int currentState = stateStack.peek();
        Action gotoAction = lrTable.getAction(currentState, production.leftHand.getName());

        if (gotoAction == null) {
            throw new RuntimeException("No transition for non-terminal: " + production.leftHand.getName() + " in state: " + currentState);
        }

        stateStack.push(gotoAction.state);
        symbolStack.push(new TokenTerminal(production.leftHand.getName(), production.leftHand.getName()));
        System.out.println("[R] " + production.leftHand.getName() + " -> " + production.rightHand);
    }

	public static void main(String[] args) throws IOException {
		SmallLexer lexer = new SmallLexer();
		ArrayList<TokenTerminal> tokenList = lexer.lexIntoTokenList("test1.txt");
		List<Production> productions = new ArrayList<Production>();
	        productions.add(new Production(
            new NonTerminal("Program_Statement'"),
            Arrays.asList(new NonTerminal("Program_Statement"))
        ));
        productions.add(new Production(new NonTerminal("Program_Statement"), Arrays.asList(new Terminal("program"), new Terminal("identifier"), new Terminal("begin"), new NonTerminal("Body_Sequence"), new Terminal("end"))));
        productions.add(new Production(new NonTerminal("Body_Sequence"), Arrays.asList(new NonTerminal("Body"), new NonTerminal("Body_Sequence_Tail"))));
        productions.add(new Production(new NonTerminal("Body_Sequence_Tail"), Arrays.asList(new NonTerminal("Body_Sequence"))));
        productions.add(new Production(new NonTerminal("Body_Sequence_Tail"), Arrays.asList(new Terminal("eps"))));
        productions.add(new Production(new NonTerminal("Body"), Arrays.asList(new NonTerminal("Int_Statement"))));
        productions.add(new Production(new NonTerminal("Body"), Arrays.asList(new NonTerminal("If_Statement"))));
        productions.add(new Production(new NonTerminal("Body"), Arrays.asList(new NonTerminal("Else_Statement"))));
        productions.add(new Production(new NonTerminal("Body"), Arrays.asList(new NonTerminal("Print_Statement"))));
        productions.add(new Production(new NonTerminal("Body"), Arrays.asList(new NonTerminal("Declaration_Statement"))));
        productions.add(new Production(new NonTerminal("Body"), Arrays.asList(new NonTerminal("Display_Statement"))));
        productions.add(new Production(new NonTerminal("Body"), Arrays.asList(new NonTerminal("For_Statement"))));
        productions.add(new Production(new NonTerminal("Body"), Arrays.asList(new NonTerminal("While_Statement"))));
        productions.add(new Production(new NonTerminal("Line_Terminator"), Arrays.asList(new Terminal("statement_terminator"))));
        productions.add(new Production(new NonTerminal("Line_Terminator"), Arrays.asList(new Terminal("punctuation_comma"))));
        productions.add(new Production(new NonTerminal("Int_Statement"), Arrays.asList(new Terminal("int"), new NonTerminal("Declaration_Sequence"))));
        productions.add(new Production(new NonTerminal("Declaration_Sequence"), Arrays.asList(new NonTerminal("Declaration_Statement"), new NonTerminal("Declaration_Tail"))));
        productions.add(new Production(new NonTerminal("Declaration_Tail"), Arrays.asList(new Terminal("punctuation_comma"), new NonTerminal("Declaration_Sequence"))));
        productions.add(new Production(new NonTerminal("Declaration_Tail"), Arrays.asList(new NonTerminal("Line_Terminator"))));
        productions.add(new Production(new NonTerminal("Declaration_Statement"), Arrays.asList(new Terminal("identifier"), new NonTerminal("Declaration_End"))));
        productions.add(new Production(new NonTerminal("Declaration_End"), Arrays.asList(new Terminal("assignment_operator"), new NonTerminal("Expression"))));
        productions.add(new Production(new NonTerminal("Declaration_End"), Arrays.asList(new Terminal("eps"))));
        productions.add(new Production(new NonTerminal("If_Statement"), Arrays.asList(new Terminal("if"), new NonTerminal("If_Conditional"), new Terminal("begin"), new NonTerminal("Body_Sequence"), new Terminal("end"))));
        productions.add(new Production(new NonTerminal("If_Conditional"), Arrays.asList(new Terminal("left_parenthesis_operator"), new NonTerminal("If_Argument"), new NonTerminal("Conditional_Operator"), new NonTerminal("If_Argument"), new Terminal("right_parenthesis_operator"))));
        productions.add(new Production(new NonTerminal("If_Argument"), Arrays.asList(new Terminal("number_literal"))));
        productions.add(new Production(new NonTerminal("If_Argument"), Arrays.asList(new Terminal("identifier"))));
        productions.add(new Production(new NonTerminal("Else_Statement"), Arrays.asList(new Terminal("else"), new Terminal("begin"), new NonTerminal("Body_Sequence"), new Terminal("end"))));
        productions.add(new Production(new NonTerminal("Print_Statement"), Arrays.asList(new Terminal("print_line"), new Terminal("left_parenthesis_operator"), new Terminal("string_literal"), new Terminal("right_parenthesis_operator"), new NonTerminal("Line_Terminator"))));
        productions.add(new Production(new NonTerminal("Print_Statement"), Arrays.asList(new Terminal("print_line"), new Terminal("left_parenthesis_operator"), new Terminal("identifier"), new Terminal("right_parenthesis_operator"))));
        productions.add(new Production(new NonTerminal("Display_Statement"), Arrays.asList(new Terminal("display_line"), new Terminal("left_parenthesis_operator"), new Terminal("string_literal"), new Terminal("right_parenthesis_operator"), new NonTerminal("Line_Terminator"))));
        productions.add(new Production(new NonTerminal("Display_Statement"), Arrays.asList(new Terminal("display_line"), new Terminal("left_parenthesis_operator"), new Terminal("identifier"), new Terminal("right_parenthesis_operator"))));
        productions.add(new Production(new NonTerminal("Expression"), Arrays.asList(new NonTerminal("Primary_Expression"), new NonTerminal("Expression_Tail"))));
        productions.add(new Production(new NonTerminal("Primary_Expression"), Arrays.asList(new Terminal("number_literal"))));
        productions.add(new Production(new NonTerminal("Primary_Expression"), Arrays.asList(new Terminal("identifier"))));
        productions.add(new Production(new NonTerminal("Expression_Tail"), Arrays.asList(new Terminal("multiplication_operator"), new NonTerminal("Expression"))));
        productions.add(new Production(new NonTerminal("Expression_Tail"), Arrays.asList(new Terminal("eps"))));
        productions.add(new Production(new NonTerminal("Conditional_Operator"), Arrays.asList(new Terminal("less_than_operator"))));
        productions.add(new Production(new NonTerminal("Conditional_Operator"), Arrays.asList(new Terminal("greater_than_operator"))));
        productions.add(new Production(new NonTerminal("For_Statement"), Arrays.asList(new Terminal("for"), new Terminal("left_parenthesis_operator"), new NonTerminal("Int_Statement"), new NonTerminal("Expression"), new NonTerminal("Line_Terminator"), new NonTerminal("Expression"), new Terminal("right_parenthesis_operator"), new Terminal("begin"), new NonTerminal("Body_Sequence"), new Terminal("end"))));
        productions.add(new Production(new NonTerminal("While_Statement"), Arrays.asList(new Terminal("while"), new Terminal("left_parenthesis_operator"), new NonTerminal("If_Argument"), new NonTerminal("Conditional_Operator"), new NonTerminal("If_Argument"), new Terminal("right_parenthesis_operator"), new Terminal("begin"), new NonTerminal("Body_Sequence"), new Terminal("end"))));


		LRTable lrTable = new LRTable();
		lrTable.addAction(0, "program", new Action("SHIFT", 2, null));
        lrTable.addAction(1, "$", new Action("ACCEPT", -1, null));
        lrTable.addAction(2, "identifier", new Action("SHIFT", 3, null));
        lrTable.addAction(3, "begin", new Action("SHIFT", 4, null));
        lrTable.addAction(4, "identifier", new Action("SHIFT", 19, null));
        lrTable.addAction(4, "int", new Action("SHIFT", 15, null));
        lrTable.addAction(4, "if", new Action("SHIFT", 16, null));
        lrTable.addAction(4, "else", new Action("SHIFT", 17, null));
        lrTable.addAction(4, "print_line", new Action("SHIFT", 18, null));
        lrTable.addAction(4, "display_line", new Action("SHIFT", 20, null));
        lrTable.addAction(4, "for", new Action("SHIFT", 21, null));
        lrTable.addAction(4, "while", new Action("SHIFT", 22, null));
        lrTable.addAction(5, "end", new Action("SHIFT", 23, null));
        lrTable.addAction(6, "identifier", new Action("SHIFT", 19, null));
        lrTable.addAction(6, "end", new Action("REDUCE", -1, "4"));
        lrTable.addAction(6, "int", new Action("SHIFT", 15, null));
        lrTable.addAction(6, "if", new Action("SHIFT", 16, null));
        lrTable.addAction(6, "else", new Action("SHIFT", 17, null));
        lrTable.addAction(6, "print_line", new Action("SHIFT", 18, null));
        lrTable.addAction(6, "display_line", new Action("SHIFT", 20, null));
        lrTable.addAction(6, "for", new Action("SHIFT", 21, null));
        lrTable.addAction(6, "while", new Action("SHIFT", 22, null));
        lrTable.addAction(7, "identifier", new Action("REDUCE", -1, "5"));
        lrTable.addAction(7, "end", new Action("REDUCE", -1, "5"));
        lrTable.addAction(7, "int", new Action("REDUCE", -1, "5"));
        lrTable.addAction(7, "if", new Action("REDUCE", -1, "5"));
        lrTable.addAction(7, "else", new Action("REDUCE", -1, "5"));
        lrTable.addAction(7, "print_line", new Action("REDUCE", -1, "5"));
        lrTable.addAction(7, "display_line", new Action("REDUCE", -1, "5"));
        lrTable.addAction(7, "for", new Action("REDUCE", -1, "5"));
        lrTable.addAction(7, "while", new Action("REDUCE", -1, "5"));
        lrTable.addAction(8, "identifier", new Action("REDUCE", -1, "6"));
        lrTable.addAction(8, "end", new Action("REDUCE", -1, "6"));
        lrTable.addAction(8, "int", new Action("REDUCE", -1, "6"));
        lrTable.addAction(8, "if", new Action("REDUCE", -1, "6"));
        lrTable.addAction(8, "else", new Action("REDUCE", -1, "6"));
        lrTable.addAction(8, "print_line", new Action("REDUCE", -1, "6"));
        lrTable.addAction(8, "display_line", new Action("REDUCE", -1, "6"));
        lrTable.addAction(8, "for", new Action("REDUCE", -1, "6"));
        lrTable.addAction(8, "while", new Action("REDUCE", -1, "6"));
        lrTable.addAction(9, "identifier", new Action("REDUCE", -1, "7"));
        lrTable.addAction(9, "end", new Action("REDUCE", -1, "7"));
        lrTable.addAction(9, "int", new Action("REDUCE", -1, "7"));
        lrTable.addAction(9, "if", new Action("REDUCE", -1, "7"));
        lrTable.addAction(9, "else", new Action("REDUCE", -1, "7"));
        lrTable.addAction(9, "print_line", new Action("REDUCE", -1, "7"));
        lrTable.addAction(9, "display_line", new Action("REDUCE", -1, "7"));
        lrTable.addAction(9, "for", new Action("REDUCE", -1, "7"));
        lrTable.addAction(9, "while", new Action("REDUCE", -1, "7"));
        lrTable.addAction(10, "identifier", new Action("REDUCE", -1, "8"));
        lrTable.addAction(10, "end", new Action("REDUCE", -1, "8"));
        lrTable.addAction(10, "int", new Action("REDUCE", -1, "8"));
        lrTable.addAction(10, "if", new Action("REDUCE", -1, "8"));
        lrTable.addAction(10, "else", new Action("REDUCE", -1, "8"));
        lrTable.addAction(10, "print_line", new Action("REDUCE", -1, "8"));
        lrTable.addAction(10, "display_line", new Action("REDUCE", -1, "8"));
        lrTable.addAction(10, "for", new Action("REDUCE", -1, "8"));
        lrTable.addAction(10, "while", new Action("REDUCE", -1, "8"));
        lrTable.addAction(11, "identifier", new Action("REDUCE", -1, "9"));
        lrTable.addAction(11, "end", new Action("REDUCE", -1, "9"));
        lrTable.addAction(11, "int", new Action("REDUCE", -1, "9"));
        lrTable.addAction(11, "if", new Action("REDUCE", -1, "9"));
        lrTable.addAction(11, "else", new Action("REDUCE", -1, "9"));
        lrTable.addAction(11, "print_line", new Action("REDUCE", -1, "9"));
        lrTable.addAction(11, "display_line", new Action("REDUCE", -1, "9"));
        lrTable.addAction(11, "for", new Action("REDUCE", -1, "9"));
        lrTable.addAction(11, "while", new Action("REDUCE", -1, "9"));
        lrTable.addAction(12, "identifier", new Action("REDUCE", -1, "10"));
        lrTable.addAction(12, "end", new Action("REDUCE", -1, "10"));
        lrTable.addAction(12, "int", new Action("REDUCE", -1, "10"));
        lrTable.addAction(12, "if", new Action("REDUCE", -1, "10"));
        lrTable.addAction(12, "else", new Action("REDUCE", -1, "10"));
        lrTable.addAction(12, "print_line", new Action("REDUCE", -1, "10"));
        lrTable.addAction(12, "display_line", new Action("REDUCE", -1, "10"));
        lrTable.addAction(12, "for", new Action("REDUCE", -1, "10"));
        lrTable.addAction(12, "while", new Action("REDUCE", -1, "10"));
        lrTable.addAction(13, "identifier", new Action("REDUCE", -1, "11"));
        lrTable.addAction(13, "end", new Action("REDUCE", -1, "11"));
        lrTable.addAction(13, "int", new Action("REDUCE", -1, "11"));
        lrTable.addAction(13, "if", new Action("REDUCE", -1, "11"));
        lrTable.addAction(13, "else", new Action("REDUCE", -1, "11"));
        lrTable.addAction(13, "print_line", new Action("REDUCE", -1, "11"));
        lrTable.addAction(13, "display_line", new Action("REDUCE", -1, "11"));
        lrTable.addAction(13, "for", new Action("REDUCE", -1, "11"));
        lrTable.addAction(13, "while", new Action("REDUCE", -1, "11"));
        lrTable.addAction(14, "identifier", new Action("REDUCE", -1, "12"));
        lrTable.addAction(14, "end", new Action("REDUCE", -1, "12"));
        lrTable.addAction(14, "int", new Action("REDUCE", -1, "12"));
        lrTable.addAction(14, "if", new Action("REDUCE", -1, "12"));
        lrTable.addAction(14, "else", new Action("REDUCE", -1, "12"));
        lrTable.addAction(14, "print_line", new Action("REDUCE", -1, "12"));
        lrTable.addAction(14, "display_line", new Action("REDUCE", -1, "12"));
        lrTable.addAction(14, "for", new Action("REDUCE", -1, "12"));
        lrTable.addAction(14, "while", new Action("REDUCE", -1, "12"));
        lrTable.addAction(15, "identifier", new Action("SHIFT", 28, null));
        lrTable.addAction(16, "left_parenthesis_operator", new Action("SHIFT", 30, null));
        lrTable.addAction(17, "begin", new Action("SHIFT", 31, null));
        lrTable.addAction(18, "left_parenthesis_operator", new Action("SHIFT", 32, null));
        lrTable.addAction(19, "identifier", new Action("REDUCE", -1, "21"));
        lrTable.addAction(19, "end", new Action("REDUCE", -1, "21"));
        lrTable.addAction(19, "int", new Action("REDUCE", -1, "21"));
        lrTable.addAction(19, "assignment_operator", new Action("SHIFT", 34, null));
        lrTable.addAction(19, "if", new Action("REDUCE", -1, "21"));
        lrTable.addAction(19, "else", new Action("REDUCE", -1, "21"));
        lrTable.addAction(19, "print_line", new Action("REDUCE", -1, "21"));
        lrTable.addAction(19, "display_line", new Action("REDUCE", -1, "21"));
        lrTable.addAction(19, "for", new Action("REDUCE", -1, "21"));
        lrTable.addAction(19, "while", new Action("REDUCE", -1, "21"));
        lrTable.addAction(20, "left_parenthesis_operator", new Action("SHIFT", 35, null));
        lrTable.addAction(21, "left_parenthesis_operator", new Action("SHIFT", 36, null));
        lrTable.addAction(22, "left_parenthesis_operator", new Action("SHIFT", 37, null));
        lrTable.addAction(23, "$", new Action("REDUCE", -1, "1"));
        lrTable.addAction(24, "end", new Action("REDUCE", -1, "2"));
        lrTable.addAction(25, "end", new Action("REDUCE", -1, "3"));
        lrTable.addAction(26, "identifier", new Action("REDUCE", -1, "15"));
        lrTable.addAction(26, "end", new Action("REDUCE", -1, "15"));
        lrTable.addAction(26, "int", new Action("REDUCE", -1, "15"));
        lrTable.addAction(26, "if", new Action("REDUCE", -1, "15"));
        lrTable.addAction(26, "else", new Action("REDUCE", -1, "15"));
        lrTable.addAction(26, "print_line", new Action("REDUCE", -1, "15"));
        lrTable.addAction(26, "display_line", new Action("REDUCE", -1, "15"));
        lrTable.addAction(26, "for", new Action("REDUCE", -1, "15"));
        lrTable.addAction(26, "while", new Action("REDUCE", -1, "15"));
        lrTable.addAction(27, "statement_terminator", new Action("SHIFT", 41, null));
        lrTable.addAction(27, "punctuation_comma", new Action("SHIFT", 39, null));
        lrTable.addAction(28, "statement_terminator", new Action("REDUCE", -1, "21"));
        lrTable.addAction(28, "punctuation_comma", new Action("REDUCE", -1, "21"));
        lrTable.addAction(28, "assignment_operator", new Action("SHIFT", 43, null));
        lrTable.addAction(29, "begin", new Action("SHIFT", 44, null));
        lrTable.addAction(30, "identifier", new Action("SHIFT", 47, null));
        lrTable.addAction(30, "number_literal", new Action("SHIFT", 46, null));
        lrTable.addAction(31, "identifier", new Action("SHIFT", 19, null));
        lrTable.addAction(31, "int", new Action("SHIFT", 15, null));
        lrTable.addAction(31, "if", new Action("SHIFT", 16, null));
        lrTable.addAction(31, "else", new Action("SHIFT", 17, null));
        lrTable.addAction(31, "print_line", new Action("SHIFT", 18, null));
        lrTable.addAction(31, "display_line", new Action("SHIFT", 20, null));
        lrTable.addAction(31, "for", new Action("SHIFT", 21, null));
        lrTable.addAction(31, "while", new Action("SHIFT", 22, null));
        lrTable.addAction(32, "identifier", new Action("SHIFT", 50, null));
        lrTable.addAction(32, "string_literal", new Action("SHIFT", 49, null));
        lrTable.addAction(33, "identifier", new Action("REDUCE", -1, "19"));
        lrTable.addAction(33, "end", new Action("REDUCE", -1, "19"));
        lrTable.addAction(33, "int", new Action("REDUCE", -1, "19"));
        lrTable.addAction(33, "if", new Action("REDUCE", -1, "19"));
        lrTable.addAction(33, "else", new Action("REDUCE", -1, "19"));
        lrTable.addAction(33, "print_line", new Action("REDUCE", -1, "19"));
        lrTable.addAction(33, "display_line", new Action("REDUCE", -1, "19"));
        lrTable.addAction(33, "for", new Action("REDUCE", -1, "19"));
        lrTable.addAction(33, "while", new Action("REDUCE", -1, "19"));
        lrTable.addAction(34, "identifier", new Action("SHIFT", 54, null));
        lrTable.addAction(34, "number_literal", new Action("SHIFT", 53, null));
        lrTable.addAction(35, "identifier", new Action("SHIFT", 56, null));
        lrTable.addAction(35, "string_literal", new Action("SHIFT", 55, null));
        lrTable.addAction(36, "int", new Action("SHIFT", 58, null));
        lrTable.addAction(37, "identifier", new Action("SHIFT", 47, null));
        lrTable.addAction(37, "number_literal", new Action("SHIFT", 46, null));
        lrTable.addAction(38, "identifier", new Action("REDUCE", -1, "16"));
        lrTable.addAction(38, "end", new Action("REDUCE", -1, "16"));
        lrTable.addAction(38, "int", new Action("REDUCE", -1, "16"));
        lrTable.addAction(38, "if", new Action("REDUCE", -1, "16"));
        lrTable.addAction(38, "else", new Action("REDUCE", -1, "16"));
        lrTable.addAction(38, "print_line", new Action("REDUCE", -1, "16"));
        lrTable.addAction(38, "display_line", new Action("REDUCE", -1, "16"));
        lrTable.addAction(38, "for", new Action("REDUCE", -1, "16"));
        lrTable.addAction(38, "while", new Action("REDUCE", -1, "16"));
        lrTable.addAction(39, "identifier", new Action("SHIFT", 28, null));
        lrTable.addAction(39, "end", new Action("REDUCE", -1, "14"));
        lrTable.addAction(39, "int", new Action("REDUCE", -1, "14"));
        lrTable.addAction(39, "if", new Action("REDUCE", -1, "14"));
        lrTable.addAction(39, "else", new Action("REDUCE", -1, "14"));
        lrTable.addAction(39, "print_line", new Action("REDUCE", -1, "14"));
        lrTable.addAction(39, "display_line", new Action("REDUCE", -1, "14"));
        lrTable.addAction(39, "for", new Action("REDUCE", -1, "14"));
        lrTable.addAction(39, "while", new Action("REDUCE", -1, "14"));
        lrTable.addAction(40, "identifier", new Action("REDUCE", -1, "18"));
        lrTable.addAction(40, "end", new Action("REDUCE", -1, "18"));
        lrTable.addAction(40, "int", new Action("REDUCE", -1, "18"));
        lrTable.addAction(40, "if", new Action("REDUCE", -1, "18"));
        lrTable.addAction(40, "else", new Action("REDUCE", -1, "18"));
        lrTable.addAction(40, "print_line", new Action("REDUCE", -1, "18"));
        lrTable.addAction(40, "display_line", new Action("REDUCE", -1, "18"));
        lrTable.addAction(40, "for", new Action("REDUCE", -1, "18"));
        lrTable.addAction(40, "while", new Action("REDUCE", -1, "18"));
        lrTable.addAction(41, "identifier", new Action("REDUCE", -1, "13"));
        lrTable.addAction(41, "end", new Action("REDUCE", -1, "13"));
        lrTable.addAction(41, "int", new Action("REDUCE", -1, "13"));
        lrTable.addAction(41, "if", new Action("REDUCE", -1, "13"));
        lrTable.addAction(41, "else", new Action("REDUCE", -1, "13"));
        lrTable.addAction(41, "print_line", new Action("REDUCE", -1, "13"));
        lrTable.addAction(41, "display_line", new Action("REDUCE", -1, "13"));
        lrTable.addAction(41, "for", new Action("REDUCE", -1, "13"));
        lrTable.addAction(41, "while", new Action("REDUCE", -1, "13"));
        lrTable.addAction(42, "statement_terminator", new Action("REDUCE", -1, "19"));
        lrTable.addAction(42, "punctuation_comma", new Action("REDUCE", -1, "19"));
        lrTable.addAction(43, "identifier", new Action("SHIFT", 64, null));
        lrTable.addAction(43, "number_literal", new Action("SHIFT", 63, null));
        lrTable.addAction(44, "identifier", new Action("SHIFT", 19, null));
        lrTable.addAction(44, "int", new Action("SHIFT", 15, null));
        lrTable.addAction(44, "if", new Action("SHIFT", 16, null));
        lrTable.addAction(44, "else", new Action("SHIFT", 17, null));
        lrTable.addAction(44, "print_line", new Action("SHIFT", 18, null));
        lrTable.addAction(44, "display_line", new Action("SHIFT", 20, null));
        lrTable.addAction(44, "for", new Action("SHIFT", 21, null));
        lrTable.addAction(44, "while", new Action("SHIFT", 22, null));
        lrTable.addAction(45, "less_than_operator", new Action("SHIFT", 67, null));
        lrTable.addAction(45, "greater_than_operator", new Action("SHIFT", 68, null));
        lrTable.addAction(46, "less_than_operator", new Action("REDUCE", -1, "24"));
        lrTable.addAction(46, "greater_than_operator", new Action("REDUCE", -1, "24"));
        lrTable.addAction(47, "less_than_operator", new Action("REDUCE", -1, "25"));
        lrTable.addAction(47, "greater_than_operator", new Action("REDUCE", -1, "25"));
        lrTable.addAction(48, "end", new Action("SHIFT", 69, null));
        lrTable.addAction(49, "right_parenthesis_operator", new Action("SHIFT", 70, null));
        lrTable.addAction(50, "right_parenthesis_operator", new Action("SHIFT", 71, null));
        lrTable.addAction(51, "identifier", new Action("REDUCE", -1, "20"));
        lrTable.addAction(51, "end", new Action("REDUCE", -1, "20"));
        lrTable.addAction(51, "int", new Action("REDUCE", -1, "20"));
        lrTable.addAction(51, "if", new Action("REDUCE", -1, "20"));
        lrTable.addAction(51, "else", new Action("REDUCE", -1, "20"));
        lrTable.addAction(51, "print_line", new Action("REDUCE", -1, "20"));
        lrTable.addAction(51, "display_line", new Action("REDUCE", -1, "20"));
        lrTable.addAction(51, "for", new Action("REDUCE", -1, "20"));
        lrTable.addAction(51, "while", new Action("REDUCE", -1, "20"));
        lrTable.addAction(52, "identifier", new Action("REDUCE", -1, "35"));
        lrTable.addAction(52, "end", new Action("REDUCE", -1, "35"));
        lrTable.addAction(52, "int", new Action("REDUCE", -1, "35"));
        lrTable.addAction(52, "if", new Action("REDUCE", -1, "35"));
        lrTable.addAction(52, "else", new Action("REDUCE", -1, "35"));
        lrTable.addAction(52, "print_line", new Action("REDUCE", -1, "35"));
        lrTable.addAction(52, "display_line", new Action("REDUCE", -1, "35"));
        lrTable.addAction(52, "multiplication_operator", new Action("SHIFT", 73, null));
        lrTable.addAction(52, "for", new Action("REDUCE", -1, "35"));
        lrTable.addAction(52, "while", new Action("REDUCE", -1, "35"));
        lrTable.addAction(53, "identifier", new Action("REDUCE", -1, "32"));
        lrTable.addAction(53, "end", new Action("REDUCE", -1, "32"));
        lrTable.addAction(53, "int", new Action("REDUCE", -1, "32"));
        lrTable.addAction(53, "if", new Action("REDUCE", -1, "32"));
        lrTable.addAction(53, "else", new Action("REDUCE", -1, "32"));
        lrTable.addAction(53, "print_line", new Action("REDUCE", -1, "32"));
        lrTable.addAction(53, "display_line", new Action("REDUCE", -1, "32"));
        lrTable.addAction(53, "multiplication_operator", new Action("REDUCE", -1, "32"));
        lrTable.addAction(53, "for", new Action("REDUCE", -1, "32"));
        lrTable.addAction(53, "while", new Action("REDUCE", -1, "32"));
        lrTable.addAction(54, "identifier", new Action("REDUCE", -1, "33"));
        lrTable.addAction(54, "end", new Action("REDUCE", -1, "33"));
        lrTable.addAction(54, "int", new Action("REDUCE", -1, "33"));
        lrTable.addAction(54, "if", new Action("REDUCE", -1, "33"));
        lrTable.addAction(54, "else", new Action("REDUCE", -1, "33"));
        lrTable.addAction(54, "print_line", new Action("REDUCE", -1, "33"));
        lrTable.addAction(54, "display_line", new Action("REDUCE", -1, "33"));
        lrTable.addAction(54, "multiplication_operator", new Action("REDUCE", -1, "33"));
        lrTable.addAction(54, "for", new Action("REDUCE", -1, "33"));
        lrTable.addAction(54, "while", new Action("REDUCE", -1, "33"));
        lrTable.addAction(55, "right_parenthesis_operator", new Action("SHIFT", 74, null));
        lrTable.addAction(56, "right_parenthesis_operator", new Action("SHIFT", 75, null));
        lrTable.addAction(57, "identifier", new Action("SHIFT", 64, null));
        lrTable.addAction(57, "number_literal", new Action("SHIFT", 63, null));
        lrTable.addAction(58, "identifier", new Action("SHIFT", 28, null));
        lrTable.addAction(59, "less_than_operator", new Action("SHIFT", 67, null));
        lrTable.addAction(59, "greater_than_operator", new Action("SHIFT", 68, null));
        lrTable.addAction(60, "identifier", new Action("REDUCE", -1, "17"));
        lrTable.addAction(60, "end", new Action("REDUCE", -1, "17"));
        lrTable.addAction(60, "int", new Action("REDUCE", -1, "17"));
        lrTable.addAction(60, "if", new Action("REDUCE", -1, "17"));
        lrTable.addAction(60, "else", new Action("REDUCE", -1, "17"));
        lrTable.addAction(60, "print_line", new Action("REDUCE", -1, "17"));
        lrTable.addAction(60, "display_line", new Action("REDUCE", -1, "17"));
        lrTable.addAction(60, "for", new Action("REDUCE", -1, "17"));
        lrTable.addAction(60, "while", new Action("REDUCE", -1, "17"));
        lrTable.addAction(61, "statement_terminator", new Action("REDUCE", -1, "20"));
        lrTable.addAction(61, "punctuation_comma", new Action("REDUCE", -1, "20"));
        lrTable.addAction(62, "statement_terminator", new Action("REDUCE", -1, "35"));
        lrTable.addAction(62, "punctuation_comma", new Action("REDUCE", -1, "35"));
        lrTable.addAction(62, "multiplication_operator", new Action("SHIFT", 81, null));
        lrTable.addAction(63, "statement_terminator", new Action("REDUCE", -1, "32"));
        lrTable.addAction(63, "punctuation_comma", new Action("REDUCE", -1, "32"));
        lrTable.addAction(63, "multiplication_operator", new Action("REDUCE", -1, "32"));
        lrTable.addAction(64, "statement_terminator", new Action("REDUCE", -1, "33"));
        lrTable.addAction(64, "punctuation_comma", new Action("REDUCE", -1, "33"));
        lrTable.addAction(64, "multiplication_operator", new Action("REDUCE", -1, "33"));
        lrTable.addAction(65, "end", new Action("SHIFT", 82, null));
        lrTable.addAction(66, "identifier", new Action("SHIFT", 85, null));
        lrTable.addAction(66, "number_literal", new Action("SHIFT", 84, null));
        lrTable.addAction(67, "identifier", new Action("REDUCE", -1, "36"));
        lrTable.addAction(67, "number_literal", new Action("REDUCE", -1, "36"));
        lrTable.addAction(68, "identifier", new Action("REDUCE", -1, "37"));
        lrTable.addAction(68, "number_literal", new Action("REDUCE", -1, "37"));
        lrTable.addAction(69, "identifier", new Action("REDUCE", -1, "26"));
        lrTable.addAction(69, "end", new Action("REDUCE", -1, "26"));
        lrTable.addAction(69, "int", new Action("REDUCE", -1, "26"));
        lrTable.addAction(69, "if", new Action("REDUCE", -1, "26"));
        lrTable.addAction(69, "else", new Action("REDUCE", -1, "26"));
        lrTable.addAction(69, "print_line", new Action("REDUCE", -1, "26"));
        lrTable.addAction(69, "display_line", new Action("REDUCE", -1, "26"));
        lrTable.addAction(69, "for", new Action("REDUCE", -1, "26"));
        lrTable.addAction(69, "while", new Action("REDUCE", -1, "26"));
        lrTable.addAction(70, "statement_terminator", new Action("SHIFT", 41, null));
        lrTable.addAction(70, "punctuation_comma", new Action("SHIFT", 87, null));
        lrTable.addAction(71, "identifier", new Action("REDUCE", -1, "28"));
        lrTable.addAction(71, "end", new Action("REDUCE", -1, "28"));
        lrTable.addAction(71, "int", new Action("REDUCE", -1, "28"));
        lrTable.addAction(71, "if", new Action("REDUCE", -1, "28"));
        lrTable.addAction(71, "else", new Action("REDUCE", -1, "28"));
        lrTable.addAction(71, "print_line", new Action("REDUCE", -1, "28"));
        lrTable.addAction(71, "display_line", new Action("REDUCE", -1, "28"));
        lrTable.addAction(71, "for", new Action("REDUCE", -1, "28"));
        lrTable.addAction(71, "while", new Action("REDUCE", -1, "28"));
        lrTable.addAction(72, "identifier", new Action("REDUCE", -1, "31"));
        lrTable.addAction(72, "end", new Action("REDUCE", -1, "31"));
        lrTable.addAction(72, "int", new Action("REDUCE", -1, "31"));
        lrTable.addAction(72, "if", new Action("REDUCE", -1, "31"));
        lrTable.addAction(72, "else", new Action("REDUCE", -1, "31"));
        lrTable.addAction(72, "print_line", new Action("REDUCE", -1, "31"));
        lrTable.addAction(72, "display_line", new Action("REDUCE", -1, "31"));
        lrTable.addAction(72, "for", new Action("REDUCE", -1, "31"));
        lrTable.addAction(72, "while", new Action("REDUCE", -1, "31"));
        lrTable.addAction(73, "identifier", new Action("SHIFT", 54, null));
        lrTable.addAction(73, "number_literal", new Action("SHIFT", 53, null));
        lrTable.addAction(74, "statement_terminator", new Action("SHIFT", 41, null));
        lrTable.addAction(74, "punctuation_comma", new Action("SHIFT", 87, null));
        lrTable.addAction(75, "identifier", new Action("REDUCE", -1, "30"));
        lrTable.addAction(75, "end", new Action("REDUCE", -1, "30"));
        lrTable.addAction(75, "int", new Action("REDUCE", -1, "30"));
        lrTable.addAction(75, "if", new Action("REDUCE", -1, "30"));
        lrTable.addAction(75, "else", new Action("REDUCE", -1, "30"));
        lrTable.addAction(75, "print_line", new Action("REDUCE", -1, "30"));
        lrTable.addAction(75, "display_line", new Action("REDUCE", -1, "30"));
        lrTable.addAction(75, "for", new Action("REDUCE", -1, "30"));
        lrTable.addAction(75, "while", new Action("REDUCE", -1, "30"));
        lrTable.addAction(76, "statement_terminator", new Action("SHIFT", 91, null));
        lrTable.addAction(76, "punctuation_comma", new Action("SHIFT", 92, null));
        lrTable.addAction(77, "identifier", new Action("REDUCE", -1, "15"));
        lrTable.addAction(77, "number_literal", new Action("REDUCE", -1, "15"));
        lrTable.addAction(78, "statement_terminator", new Action("SHIFT", 91, null));
        lrTable.addAction(78, "punctuation_comma", new Action("SHIFT", 94, null));
        lrTable.addAction(79, "identifier", new Action("SHIFT", 85, null));
        lrTable.addAction(79, "number_literal", new Action("SHIFT", 84, null));
        lrTable.addAction(80, "statement_terminator", new Action("REDUCE", -1, "31"));
        lrTable.addAction(80, "punctuation_comma", new Action("REDUCE", -1, "31"));
        lrTable.addAction(81, "identifier", new Action("SHIFT", 64, null));
        lrTable.addAction(81, "number_literal", new Action("SHIFT", 63, null));
        lrTable.addAction(82, "identifier", new Action("REDUCE", -1, "22"));
        lrTable.addAction(82, "end", new Action("REDUCE", -1, "22"));
        lrTable.addAction(82, "int", new Action("REDUCE", -1, "22"));
        lrTable.addAction(82, "if", new Action("REDUCE", -1, "22"));
        lrTable.addAction(82, "else", new Action("REDUCE", -1, "22"));
        lrTable.addAction(82, "print_line", new Action("REDUCE", -1, "22"));
        lrTable.addAction(82, "display_line", new Action("REDUCE", -1, "22"));
        lrTable.addAction(82, "for", new Action("REDUCE", -1, "22"));
        lrTable.addAction(82, "while", new Action("REDUCE", -1, "22"));
        lrTable.addAction(83, "right_parenthesis_operator", new Action("SHIFT", 98, null));
        lrTable.addAction(84, "right_parenthesis_operator", new Action("REDUCE", -1, "24"));
        lrTable.addAction(85, "right_parenthesis_operator", new Action("REDUCE", -1, "25"));
        lrTable.addAction(86, "identifier", new Action("REDUCE", -1, "27"));
        lrTable.addAction(86, "end", new Action("REDUCE", -1, "27"));
        lrTable.addAction(86, "int", new Action("REDUCE", -1, "27"));
        lrTable.addAction(86, "if", new Action("REDUCE", -1, "27"));
        lrTable.addAction(86, "else", new Action("REDUCE", -1, "27"));
        lrTable.addAction(86, "print_line", new Action("REDUCE", -1, "27"));
        lrTable.addAction(86, "display_line", new Action("REDUCE", -1, "27"));
        lrTable.addAction(86, "for", new Action("REDUCE", -1, "27"));
        lrTable.addAction(86, "while", new Action("REDUCE", -1, "27"));
        lrTable.addAction(87, "identifier", new Action("REDUCE", -1, "14"));
        lrTable.addAction(87, "end", new Action("REDUCE", -1, "14"));
        lrTable.addAction(87, "int", new Action("REDUCE", -1, "14"));
        lrTable.addAction(87, "if", new Action("REDUCE", -1, "14"));
        lrTable.addAction(87, "else", new Action("REDUCE", -1, "14"));
        lrTable.addAction(87, "print_line", new Action("REDUCE", -1, "14"));
        lrTable.addAction(87, "display_line", new Action("REDUCE", -1, "14"));
        lrTable.addAction(87, "for", new Action("REDUCE", -1, "14"));
        lrTable.addAction(87, "while", new Action("REDUCE", -1, "14"));
        lrTable.addAction(88, "identifier", new Action("REDUCE", -1, "34"));
        lrTable.addAction(88, "end", new Action("REDUCE", -1, "34"));
        lrTable.addAction(88, "int", new Action("REDUCE", -1, "34"));
        lrTable.addAction(88, "if", new Action("REDUCE", -1, "34"));
        lrTable.addAction(88, "else", new Action("REDUCE", -1, "34"));
        lrTable.addAction(88, "print_line", new Action("REDUCE", -1, "34"));
        lrTable.addAction(88, "display_line", new Action("REDUCE", -1, "34"));
        lrTable.addAction(88, "for", new Action("REDUCE", -1, "34"));
        lrTable.addAction(88, "while", new Action("REDUCE", -1, "34"));
        lrTable.addAction(89, "identifier", new Action("REDUCE", -1, "29"));
        lrTable.addAction(89, "end", new Action("REDUCE", -1, "29"));
        lrTable.addAction(89, "int", new Action("REDUCE", -1, "29"));
        lrTable.addAction(89, "if", new Action("REDUCE", -1, "29"));
        lrTable.addAction(89, "else", new Action("REDUCE", -1, "29"));
        lrTable.addAction(89, "print_line", new Action("REDUCE", -1, "29"));
        lrTable.addAction(89, "display_line", new Action("REDUCE", -1, "29"));
        lrTable.addAction(89, "for", new Action("REDUCE", -1, "29"));
        lrTable.addAction(89, "while", new Action("REDUCE", -1, "29"));
        lrTable.addAction(90, "identifier", new Action("SHIFT", 102, null));
        lrTable.addAction(90, "number_literal", new Action("SHIFT", 101, null));
        lrTable.addAction(91, "identifier", new Action("REDUCE", -1, "13"));
        lrTable.addAction(91, "number_literal", new Action("REDUCE", -1, "13"));
        lrTable.addAction(92, "identifier", new Action("REDUCE", -1, "14"));
        lrTable.addAction(92, "number_literal", new Action("REDUCE", -1, "14"));
        lrTable.addAction(93, "identifier", new Action("REDUCE", -1, "16"));
        lrTable.addAction(93, "number_literal", new Action("REDUCE", -1, "16"));
        lrTable.addAction(94, "identifier", new Action("SHIFT", 28, null));
        lrTable.addAction(94, "number_literal", new Action("REDUCE", -1, "14"));
        lrTable.addAction(95, "identifier", new Action("REDUCE", -1, "18"));
        lrTable.addAction(95, "number_literal", new Action("REDUCE", -1, "18"));
        lrTable.addAction(96, "right_parenthesis_operator", new Action("SHIFT", 104, null));
        lrTable.addAction(97, "statement_terminator", new Action("REDUCE", -1, "34"));
        lrTable.addAction(97, "punctuation_comma", new Action("REDUCE", -1, "34"));
        lrTable.addAction(98, "begin", new Action("REDUCE", -1, "23"));
        lrTable.addAction(99, "right_parenthesis_operator", new Action("SHIFT", 105, null));
        lrTable.addAction(100, "right_parenthesis_operator", new Action("REDUCE", -1, "35"));
        lrTable.addAction(100, "multiplication_operator", new Action("SHIFT", 107, null));
        lrTable.addAction(101, "right_parenthesis_operator", new Action("REDUCE", -1, "32"));
        lrTable.addAction(101, "multiplication_operator", new Action("REDUCE", -1, "32"));
        lrTable.addAction(102, "right_parenthesis_operator", new Action("REDUCE", -1, "33"));
        lrTable.addAction(102, "multiplication_operator", new Action("REDUCE", -1, "33"));
        lrTable.addAction(103, "identifier", new Action("REDUCE", -1, "17"));
        lrTable.addAction(103, "number_literal", new Action("REDUCE", -1, "17"));
        lrTable.addAction(104, "begin", new Action("SHIFT", 108, null));
        lrTable.addAction(105, "begin", new Action("SHIFT", 109, null));
        lrTable.addAction(106, "right_parenthesis_operator", new Action("REDUCE", -1, "31"));
        lrTable.addAction(107, "identifier", new Action("SHIFT", 102, null));
        lrTable.addAction(107, "number_literal", new Action("SHIFT", 101, null));
        lrTable.addAction(108, "identifier", new Action("SHIFT", 19, null));
        lrTable.addAction(108, "int", new Action("SHIFT", 15, null));
        lrTable.addAction(108, "if", new Action("SHIFT", 16, null));
        lrTable.addAction(108, "else", new Action("SHIFT", 17, null));
        lrTable.addAction(108, "print_line", new Action("SHIFT", 18, null));
        lrTable.addAction(108, "display_line", new Action("SHIFT", 20, null));
        lrTable.addAction(108, "for", new Action("SHIFT", 21, null));
        lrTable.addAction(108, "while", new Action("SHIFT", 22, null));
        lrTable.addAction(109, "identifier", new Action("SHIFT", 19, null));
        lrTable.addAction(109, "int", new Action("SHIFT", 15, null));
        lrTable.addAction(109, "if", new Action("SHIFT", 16, null));
        lrTable.addAction(109, "else", new Action("SHIFT", 17, null));
        lrTable.addAction(109, "print_line", new Action("SHIFT", 18, null));
        lrTable.addAction(109, "display_line", new Action("SHIFT", 20, null));
        lrTable.addAction(109, "for", new Action("SHIFT", 21, null));
        lrTable.addAction(109, "while", new Action("SHIFT", 22, null));
        lrTable.addAction(110, "right_parenthesis_operator", new Action("REDUCE", -1, "34"));
        lrTable.addAction(111, "end", new Action("SHIFT", 113, null));
        lrTable.addAction(112, "end", new Action("SHIFT", 114, null));
        lrTable.addAction(113, "identifier", new Action("REDUCE", -1, "39"));
        lrTable.addAction(113, "end", new Action("REDUCE", -1, "39"));
        lrTable.addAction(113, "int", new Action("REDUCE", -1, "39"));
        lrTable.addAction(113, "if", new Action("REDUCE", -1, "39"));
        lrTable.addAction(113, "else", new Action("REDUCE", -1, "39"));
        lrTable.addAction(113, "print_line", new Action("REDUCE", -1, "39"));
        lrTable.addAction(113, "display_line", new Action("REDUCE", -1, "39"));
        lrTable.addAction(113, "for", new Action("REDUCE", -1, "39"));
        lrTable.addAction(113, "while", new Action("REDUCE", -1, "39"));
        lrTable.addAction(114, "identifier", new Action("REDUCE", -1, "38"));
        lrTable.addAction(114, "end", new Action("REDUCE", -1, "38"));
        lrTable.addAction(114, "int", new Action("REDUCE", -1, "38"));
        lrTable.addAction(114, "if", new Action("REDUCE", -1, "38"));
        lrTable.addAction(114, "else", new Action("REDUCE", -1, "38"));
        lrTable.addAction(114, "print_line", new Action("REDUCE", -1, "38"));
        lrTable.addAction(114, "display_line", new Action("REDUCE", -1, "38"));
        lrTable.addAction(114, "for", new Action("REDUCE", -1, "38"));
        lrTable.addAction(114, "while", new Action("REDUCE", -1, "38"));





//		ArrayList<TokenTerminal> tokenList = lexer.lexIntoTokenList(args[1]);
//		Stack<TokenTerminal> symbolStack = new Stack
		System.out.println(tokenList);
		for(TokenTerminal tok: tokenList) {
			System.out.print(tok.getTerminal() + " ");
		}
		LRParser lrParser = new LRParser();
		lrParser.parse(lrTable,tokenList,productions);



	}

}
